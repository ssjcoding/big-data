package leetcode.arrary;

/**
 * 题目：有效的数独
 *
 * 描述：请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 *      （1）数字 1-9 在每一行只能出现一次。
 *      （2）数字 1-9 在每一列只能出现一次
 *      （3）数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 *      数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 注意：
 *      一个有效的数独（部分已被填充）不一定是可解的。
 *      只需要根据以上规则，验证已经填入的数字是否有效即可。
 *
 * 示例：
 * 输入：board =[["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 *
 * 输出：[["5","3","4","6","7","8","9","1","2"]
 * ,["6","7","2","1","9","5","3","4","8"]
 * ,["1","9","8","3","4","2","5","6","7"]
 * ,["8","5","9","7","6","1","4","2","3"]
 * ,["4","2","6","8","5","3","7","9","1"]
 * ,["7","1","3","9","2","4","8","5","6"]
 * ,["9","6","1","5","3","7","2","8","4"]
 * ,["2","8","7","4","1","9","6","3","5"]
 * ,["3","4","5","2","8","6","1","7","9"]]
 *
 * 解释：输入的数独如上图所示，唯一有效的解决方案如下所示：
 *
 * 提示：
 *      board.length == 9
 *      board[i].length == 9
 *      board[i][j] 是一位数字或者 '.'
 *      题目数据 保证 输入数独仅有一个解
 *
 * @author tonysu
 * @version 1.0
 * @since 2021/7/9 3:42 下午
 */
public class LeetCode_37_SolveSudoku {
    public static void main(String[] args) {
        char[][] board = {{'8','3','.','.','7','.','.','.','.'}
                ,{'6','.','.','1','9','5','.','.','.'}
                ,{'.','9','8','.','.','.','.','6','.'}
                ,{'8','.','.','.','6','.','.','.','3'}
                ,{'4','.','.','8','.','3','.','.','1'}
                ,{'7','.','.','.','2','.','.','.','6'}
                ,{'.','6','.','.','.','.','2','8','.'}
                ,{'.','.','.','4','1','9','.','.','5'}
                ,{'.','.','.','.','8','.','.','7','9'}};
        solveSudoku(board);
        System.out.println(board);
    }

    /**
     * 用三个二维数组存储当前数字在当前行、当前列、当前3*3小方格内是否已经出现过， 出现过为true否则为false
     * @param board
     * @return
     */
    public static char[][] solveSudoku(char[][] board) {
        return null;
    }
}
